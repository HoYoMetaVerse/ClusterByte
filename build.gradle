// Top-level build file where you can add configuration options common to all sub-projects/modules.
ext {
    version = "1.1.0"
}

@SuppressWarnings(['unused', 'GrMethodMayBeStatic'])
def depNotation(String projectName) {
    return "io.nebula.platform.clusterbyte:${projectName}:${ext.version}"
}


buildscript {
    apply from: './script/upload.gradle'
    ext.kotlin_version = '1.3.72'
    repositories {
        maven() {
            url { uri(LOCALREPO) }
        }
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.5.3'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        if (!project.gradle.startParameter.taskNames.contains(":upload-plugin:uploadArchives")) {
            classpath "io.nebula.platform.plugin:upload:1.0.0-test"
        }
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        maven() {
            url { uri(LOCALREPO) }
        }
    }
}

subprojects { subProject ->
    if (project.gradle.startParameter.taskNames.contains(":upload-plugin:uploadArchives")) {
        return
    }
    if (subProject.name == 'app' || subProject.name == 'upload-plugin') {
        return
    }
    subProject.apply plugin: 'io.nebula.upload'
    subProject.upload {
        it.repositories {
            local {
                url LOCALREPO
                it.pom {
                    it.version "1.0.0-betabeta"
                }
            }
            remote {
                url MAVENREPO
            }
        }
        it.pom {
            it.groupId 'io.nebula.platform.clusterbyte'
            it.artifactId subProject.name
            it.version rootProject.ext.version
        }
    }
    subProject.afterEvaluate {
        substituteProjectDependency(project)
    }
}

def substituteProjectDependency(Project project) {
    project.configurations.all { configuration ->
        configuration.allDependencies.forEach {
            if (it instanceof ProjectDependency) {
                def name = it.dependencyProject.name
                project.upload.substitute(name, depNotation(name))
            }
        }
    }
}

Task getNamedTask(String projectName, String taskName) {
    return project.getSubprojects().find { it.name == projectName }.tasks.getByName(taskName)
}

task fullDeploy {
    if (gradle.startParameter.getTaskNames().any { it.contains("fullDeploy") }) {
        subprojects.last().afterEvaluate {
            def coreTask = getNamedTask("byte-core", "publishToLocal")
            def pluginTask = getNamedTask("byte-plugin", "publishToLocal")
            def asmTask = getNamedTask("converter-asm", "publishToLocal")
            def javassistTask = getNamedTask("converter-javassist", "publishToLocal")

            fullDeploy.dependsOn(coreTask)
            fullDeploy.dependsOn(pluginTask)
            fullDeploy.dependsOn(asmTask)
            fullDeploy.dependsOn(javassistTask)
        }
    }
}

task fullDeployRemote {
    if (gradle.startParameter.getTaskNames().any { it.contains("fullDeployRemote") }) {
        subprojects.last().afterEvaluate {
            def coreTask = getNamedTask("byte-core", "publishToRemote")
            def pluginTask = getNamedTask("byte-plugin", "publishToRemote")
            def asmTask = getNamedTask("converter-asm", "publishToRemote")
            def javassistTask = getNamedTask("converter-javassist", "publishToRemote")

            fullDeployRemote.dependsOn(coreTask)
            fullDeployRemote.dependsOn(pluginTask)
            fullDeployRemote.dependsOn(asmTask)
            fullDeployRemote.dependsOn(javassistTask)
        }
    }
}